// Code generated by mockery v2.36.1. DO NOT EDIT.

package storagemocks

import (
	context "context"
	mailing "mail_service/internal"
	criteriamanager "mail_service/internal/kit/criteriamanager"

	mock "github.com/stretchr/testify/mock"
)

// ClienteRepository is an autogenerated mock type for the ClienteRepository type
type ClienteRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ClienteRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, id
func (_m *ClienteRepository) Find(ctx context.Context, id string) (mailing.Cliente, error) {
	ret := _m.Called(ctx, id)

	var r0 mailing.Cliente
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mailing.Cliente, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mailing.Cliente); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(mailing.Cliente)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, criteria
func (_m *ClienteRepository) Get(ctx context.Context, criteria criteriamanager.Criteria) (mailing.ClientesResponse, error) {
	ret := _m.Called(ctx, criteria)

	var r0 mailing.ClientesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, criteriamanager.Criteria) (mailing.ClientesResponse, error)); ok {
		return rf(ctx, criteria)
	}
	if rf, ok := ret.Get(0).(func(context.Context, criteriamanager.Criteria) mailing.ClientesResponse); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(mailing.ClientesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, criteriamanager.Criteria) error); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, cliente
func (_m *ClienteRepository) Save(ctx context.Context, cliente mailing.Cliente) error {
	ret := _m.Called(ctx, cliente)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mailing.Cliente) error); ok {
		r0 = rf(ctx, cliente)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, cliente
func (_m *ClienteRepository) Update(ctx context.Context, cliente mailing.Cliente) error {
	ret := _m.Called(ctx, cliente)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mailing.Cliente) error); ok {
		r0 = rf(ctx, cliente)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClienteRepository creates a new instance of ClienteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClienteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClienteRepository {
	mock := &ClienteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
